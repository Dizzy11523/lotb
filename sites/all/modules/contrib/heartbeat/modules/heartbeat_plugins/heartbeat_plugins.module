<?php

/**
 * @file
 * This file includes plugins for heartbeat by configuration.
 * The plugins are ctools exportables.
 */
/**
 * Implements hook_ctools_plugin_api().
 */
function heartbeat_plugins_ctools_plugin_api($owner, $api) {
  if ($owner == 'heartbeat_plugins' && ($api == 'plugins' || $api == 'heartbeat_plugins')) {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function heartbeat_plugins_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && ($plugin == 'export_ui' || $plugin == 'heartbeat_plugins')) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_heartbeat_plugin_info().
 * Built-in default plugins that can be used with heartbeat.
 */
function heartbeat_plugins_heartbeat_plugin_info() {

  $plugin_names = array();

  if (module_exists('flag')) {

    $plugin_name = new HeartbeatPluginWrapper;
    $plugin_name->disabled = FALSE; /* Edit this to true to make a default plugin_name disabled initially */
    $plugin_name->api_version = 1;
    $plugin_name->plugin_name = 'flagattachment';
    $plugin_name->label = 'Flag link attachments with a count';
    $plugin_name->module = 'heartbeat_plugins';
    $plugin_name->settings = array(
      'attachment' => 1,
      'count_enabled' => 1,
    );
    $plugin_names['flagattachment'] = $plugin_name;
  }

  return $plugin_names;
}

/**
 * Implements hook_form_alter().
 *
 * @param array $form
 * @param array $form_state
 */
function heartbeat_plugins_form_alter(&$form, &$form_state, $form_id) {

  // Hook into the ctools edit form for heartbeat message templates.
  if ($form_id == 'ctools_export_ui_edit_item_form' && isset($form['info']['message_id'])) {
    foreach(heartbeat_plugins_get_active_plugins() as $pluginWrapper) {
      $plugin = $pluginWrapper->getPlugin();
      if ($plugin->hasAttachments()) {
        $plugin->pluginAttachmentForm($form, $form_state);
      }

    }
  }

}

/**
 * Ctools export ui callback for the plugins form.
 */
function heartbeat_plugins_ctools_edit_ui_form(&$form, &$form_state) {

  $settings = $form_state['item']->settings;
  $new = TRUE;

  $plugin_name = $form_state['item']->plugin_name;
  $pluginWrapper = heartbeat_plugins_get_plugin($plugin_name);
  if ($pluginWrapper instanceof iHeartbeatPluginWrapper) {
    $plugin = $pluginWrapper->getPlugin();
    if ($plugin) {
      $plugin->pluginUIForm($form, $form_state);
    }
    $new = FALSE;
  }

  $form['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#default_value' => isset($form_state['item']->label) ? $form_state['item']->label : array(),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
    '#attributes' => $new ? array() : array('readonly' => 'readonly'),
  );
  $form['module'] = array(
    '#type' => 'textfield',
    '#title' => t('Module'),
    '#default_value' => isset($form_state['item']->module) ? $form_state['item']->module : array(),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
    '#attributes' => $new ? array() : array('readonly' => 'readonly'),
  );

  if ($new) {
    $form['settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
      '#group' => 'general-tab',
    );
    $form['settings']['attachment'] = array(
      '#type' => 'checkbox',
      '#title' => t('Attachment'),
      '#default_value' => isset($settings['attachment']) ? $settings['attachment'] : array(),
    );
  }

  // Clear the cache for heartbeat plugins.
  cache_clear_all('heartbeat_plugins', 'cache');

}

/**
 * CTools export ui validate function for plugins
 */
function heartbeat_plugins_ctools_edit_ui_validate(&$form, &$form_state) {

  $pluginName = $form_state['values']['plugin_name'];
  if (empty($pluginName)) {
    form_set_error('plugin_name', t('No valid plugin name given. The plugin needs to be a valid class as extension of iHeartbeatPlugin.'));
  }

  $pluginWrapper = heartbeat_plugins_get_plugin($pluginName);
  if ($pluginWrapper instanceof iHeartbeatPluginWrapper) {
    $plugin = $pluginWrapper->getPlugin();
  }

  if (!($plugin instanceof iHeartbeatPlugin)) {
    form_set_error('plugin_name', t('Class @class does not implement iHeartbeatPlugin.', array('@class' => $pluginName)));
  }

  if (!($plugin instanceof HeartbeatBasePlugin)) {
    form_set_error('plugin_name', t('Class @class does not implement HeartbeatBasePlugin.', array('@class' => $pluginName)));
  }

}

/**
 * CTools delete callback for plugins.
 */
function heartbeat_plugins_delete($plugin) {

  db_delete('heartbeat_plugins')
    ->condition('plugin_name', $plugin->plugin_name)
    ->execute();

  // Clear the cache for heartbeat plugins.
  cache_clear_all('heartbeat_plugins', 'cache');

}

/**
 * Implements hook_permission().
 */
function heartbeat_plugins_permission() {

  $permissions = array(
    'admin heartbeat plugins' => array(
      'title' => t('Administer heartbeat plugins'),
      'description' => t('Manage the heartbeat plugins.')
    ),
  );

  return $permissions;

}

/**
 * Implements hook_module_implements_alter().
 */
function heartbeat_plugins_module_implements_alter(&$implementations, $hook) {

  // Because it's possible to turn on/off plugins for heartbeat,
  // we'll unset hooks here if necessary which otherwhise do nothing at all.

  // Disable the hook used in heartbeat plugins.
  /*$vd_hooks = array(
    'field_extra_fields',
    'entity_info',
    'ds_fields',
    'theme_registry_alter',
    'ctools_plugin_api',
  );
  if (!variable_get('ds_extras_vd', FALSE) && in_array($hook, $vd_hooks)) {
    unset($implementations['ds_extras']);
  }*/
}

/**
 * Implements hook_menu().
 */
function heartbeat_plugins_menu() {
  $items = array();
  foreach (heartbeat_plugins_get_active_plugins() as $pluginWrapper) {
    if ($plugin = $pluginWrapper->getPlugin()) {
      $items += $plugin->getMenuItems();
    }
  }
  return $items;
}

/**
 * Implements hook_theme().
 */
function heartbeat_plugins_theme() {
  $registry = array(
    'heartbeat_attachments' => array(
      'variables' => array('message' => NULL),
    ),
  );
  return $registry;
}

/**
 * Implements hook_init().
 */
function heartbeat_plugins_init() {
  heartbeat_plugins_get_active_plugins(TRUE);
}

/**
 * Implements of hook_flag_definitions().
 */
function heartbeat_plugins_flag_definitions() {
  $definitions = array();
  foreach (heartbeat_plugins_get_active_plugins() as $pluginWrapper) {
    $plugin = $pluginWrapper->getPlugin();
    if ($plugin instanceof HeartbeatFlagPlugin && $plugin->hasFlagDefinitions()) {
      $definitions += $plugin->flagDefinitions();
    }
  }
  return $definitions;
}

/**
 * Implements hook_flag_default_flags().
 */
function heartbeat_plugins_flag_default_flags() {

  $flags = array();
  foreach (heartbeat_plugins_get_active_plugins() as $pluginWrapper) {
    $plugin = $pluginWrapper->getPlugin();
    if ($plugin instanceof HeartbeatFlagPlugin && $plugin->hasDefaultFlags()) {
      $flags += $plugin->flagDefaults();
    }
  }

  return $flags;

}

/**
 * Implements hook_token_info().
 */
function heartbeat_plugins_token_info() {

  // Handy tokens for heartbeat_activity.
  $tokens = array();

  if (module_exists('flag')) {
    $flags = flag_get_flags('heartbeat_activity');
    foreach ($flags as $flag) {
      $tokens['heartbeat_activity']['flag-' . str_replace('_', '-', $flag->name) . '-count-linked'] = array(
        'name' => t('@flag flag count', array('@flag' => $flag->get_title())),
        'description' => t('Total flag count for flag @flag', array('@flag' => $flag->get_title())),
      );
    }
  }

  return array(
    'tokens' => $tokens,
  );

}

/**
 * Implements hook_tokens().
 */
function heartbeat_plugins_tokens($type, $tokens, array $data = array(), array $options = array()) {

  ctools_include('modal');
  ctools_include('ajax');

  $url_options = array('absolute' => TRUE);
  $url_options['alias'] = TRUE;
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'heartbeat_activity' && !empty($data['heartbeat_activity'])) {
    $flags = flag_get_flags('heartbeat_activity');
    $object = $data['heartbeat_activity'];
    foreach ($flags as $flag) {
      $flag_token = 'flag-'. str_replace('_', '-', $flag->name) .'-count-linked';
      foreach ($tokens as $name => $original) {
        if ($name == $flag_token) {
          $count = $flag->get_count($flag->get_content_id($object));
          $output = ctools_modal_text_button($count == 1 ? t('One person') : t('@count people', array('@count' => $count)),
            'heartbeat/nojs/flagged/' . $object->uaid,
            t('Show people'),
            'ctools-modal-ctools-heartbeat-style');
          $replacements[$original] = $output;
        }
      }
    }
  }

  return $replacements;
}

/**
 * CTools ajax callback to show the users who flagged the content.
 */
function heartbeat_plugins_modal_flagging_users($js = NULL, $heartbeatActivity) {

  $uaid = $heartbeatActivity->uaid;
  $result = db_query("SELECT u.name, files.uri, f.uid FROM {file_managed} files INNER JOIN {users} u ON u.picture = files.fid INNER JOIN {flag_content} f ON f.uid = u.uid WHERE content_id = :uaid AND content_type = 'heartbeat_activity' ", array(':uaid' => $uaid));

  $output = '';
  $list = array();
  foreach ($result as $account) {
    $list[] = l(theme('heartbeat_activity_avatar', array('heartbeatactivity' => $heartbeatActivity, 'uri' => $account->uri)), 'user/' . $account->uid, array('html' => TRUE));
  }
  $output = theme('item_list', array('items' => $list));

  // Fall back if $js is not set.
  if (!$js) {

    return $output;

  }
  else {

    ctools_include('ajax');
    $commands = array();
    $commands[] = ajax_command_html('#modal-content', $output);
    print ajax_render($commands);
    exit;

  }

}

/**
 * Implements hook_heartbeat_stream_load().
 */
function heartbeat_plugins_heartbeat_stream_load(HeartbeatStream $heartbeatStream) {
  foreach (heartbeat_plugins_get_active_plugins() as $pluginWrapper) {
    $pluginWrapper->getPlugin()->streamLoaded($heartbeatStream);
  }
}

/**
 * Implements of hook_heartbeat_activity_delete().
 *
 *   Delete the attachments from a heartbeat activity object.
 * @param $message
 *   HeartbeatActivity ID
 */
function heartbeat_plugins_heartbeat_activity_delete($uaids, $all) {

  foreach (heartbeat_plugins_get_active_plugins() as $pluginWrapper) {
    $pluginWrapper->getPlugin()->activityRemoved($uaids, $all);
  }

}

/**
 * Implements hook_heartbeat_activity_view().
 *
 * @param HeartbeatActivity $heartbeatActivity
 *   The activity message object.
 */
function heartbeat_plugins_heartbeat_activity_view(HeartbeatActivity $heartbeatActivity, $view_mode = 'full', $language = NULL) {

  $heartbeatActivity->content['attachments'] = array('#markup' => '');
  if ($heartbeatActivity->template->hasAttachments()) {
    $heartbeatActivity->content['attachments']['#markup'] = theme('heartbeat_attachments', array('message' => $heartbeatActivity));
  }

}

/**
 * Preprocess function for the heartbeat activity attachments.
 */
function heartbeat_plugins_preprocess_heartbeat_attachments(&$variables) {

  $attachments = isset($variables['message']->template->attachments) ? $variables['message']->template->attachments : array();
  foreach ($attachments as $plugin_name => $plugin_attachment) {
    $pluginWrapper = heartbeat_plugins_get_plugin($plugin_name);
    if ($pluginWrapper instanceof HeartbeatPluginWrapper) {
      $plugin = $pluginWrapper->getPlugin();
      if ($plugin->isEnabled($variables['message']) && $plugin->hasAttachments()) {
        $plugin->renderAttachments($variables['message']);
      }
    }

  }
  $variables['attachments'] = $variables['message']->attachments;

}

/**
 * Preprocess function for the heartbeat activity buttons.
 */
function heartbeat_plugins_preprocess_heartbeat_buttons(&$variables) {

  $attachments = isset($variables['message']->template->attachments) ? $variables['message']->template->attachments : array();
  foreach ($attachments as $plugin_name => $plugin_attachment) {
    $pluginWrapper = heartbeat_plugins_get_plugin($plugin_name);
    if ($pluginWrapper instanceof HeartbeatPluginWrapper) {
      $plugin = $pluginWrapper->getPlugin();
      if ($plugin->isEnabled($variables['message']) && $plugin->hasButtons()) {
        $plugin->renderButtons($variables['message']);
      }
    }

  }

}

/**
 * Theme function for messages attachments.
 *
 * @param $variables
 *   Array of variables available for output.
 */
function theme_heartbeat_attachments($variables) {

  $output = '<div class="heartbeat-attachments">';
  $output .= implode(' ', $variables['attachments']);
  $output .= '</div>';

  return $output;

}

/**
 * Helper function to retrieve an active plugin.
 *
 * @param Boolean $include
 *   Indicates whether the plugins needs to be loaded/included.
 */
function heartbeat_plugins_get_plugin($plugin_name) {

  $plugins = &drupal_static('heartbeat_plugins');

  if (empty($plugins)) {
    heartbeat_plugins_get_active_plugins(TRUE);
  }

  foreach ($plugins as $plugin) {
    if ($plugin->plugin_name == $plugin_name) {
      return $plugin;
    }
  }

  return NULL;

}

/**
 * Helper function to retrieve all active plugins.
 *
 * @param Boolean $include
 *   Indicates whether the plugins needs to be loaded/included.
 */
function heartbeat_plugins_get_active_plugins($include = FALSE) {

  $plugins = &drupal_static('heartbeat_plugins');

  if (!isset($plugins)) {

    $plugins = array();

    // Load from cache if possible.
    if ($object = cache_get('heartbeat_plugins')) {
      $plugins = $object->data;
    }
    // Ctools loads the plugins by default, we'll save it in cache.
    else {
      ctools_include('export');
      foreach(ctools_export_crud_load_all('heartbeat_plugins') as $plugin) {
        if (empty($plugin->disabled)) {
          $plugins[] = $plugin;
        }
      }
      cache_set('heartbeat_plugins', $plugins);
    }
  }

  if (!empty($plugins)) {
    if ($include) {
      foreach ($plugins as $plugin) {
        // Load our plugin file.
        module_load_include('inc', 'heartbeat_plugins', 'plugins/' . $plugin->plugin_name);
      }
    }
  }

  return $plugins;

}

/**
 *
 * HeartbeatPlugin interface.
 */
interface iHeartbeatPluginWrapper {

  /**
   * getPlugin().
   * Get the real plugin object.
   */
  public function getPlugin();

}

/**
 *
 * HeartbeatPlugin interface.
 */
interface iHeartbeatPlugin {

  /**
   * hasAttachments().
   */
  public function hasAttachments();

  /**
   * hasButtons().
   */
  public function hasButtons();

  /**
   * pluginUIForm().
   */
  public function pluginUIForm(&$form, &$form_state);

  /**
   * pluginAttachmentForm().
   * The form to add attachments to templates.
   */
  public function pluginAttachmentForm(&$form, &$form_state);

  /**
   * loadAttachments().
   */
  public function loadAttachments(HeartbeatActivity $heartbeatActivity);

  /**
   * renderAttachments().
   */
  public function renderAttachments(HeartbeatActivity $heartbeatActivity);

  /**
   * renderButtons().
   */
  public function renderButtons(HeartbeatActivity $heartbeatActivity);

  /**
   * streamLoaded().
   */
  public function streamLoaded(HeartbeatStream $heartbeatStream);

}

/**
 * HeartbeatFlagPlugin abstract class.
 */
abstract class HeartbeatBasePlugin {

  protected $label = '';
  protected $settings = array();
  protected $stream = NULL;

  /**
   * __construct().
   */
  public function __construct($label, $settings) {
    $this->setLabel($label);
    $this->addSettings($settings);
  }

  /**
   * setLabel().
   */
  public function setLabel($label) {
    $this->label = $label;
  }

  /**
   * getLabel().
   */
  public function getLabel() {
    return $this->label;
  }

  /**
   * setStream().
   */
  public function setStream(HeartbeatStream $heartbeatStream) {
    $this->stream = $heartbeatStream;
  }

  /**
   * addSettings().
   */
  public function addSettings($settings) {
    $this->settings += $settings;
  }

  /**
   * getSettings().
   */
  public function getSettings() {
    return $this->settings;
  }

  /**
   * isEnabled().
   */
  public function isEnabled(HeartbeatActivity $heartbeatActivity) {
    return isset($heartbeatActivity->template->attachments[$this->settings['plugin_name']]);
  }

  /**
   * activityRemoved().
   */
  public function activityRemoved($uaids, $all) {}

  /**
   * streamLoaded().
   */
  public function streamLoaded(HeartbeatStream $heartbeatStream) {

  }

  /**
   * getMenuItems().
   */
  public function getMenuItems() {
    return array();
  }

}

/**
 * HeartbeatFlagPlugin abstract class.
 */
class HeartbeatFlagPlugin extends HeartbeatBasePlugin {

  /**
   * hasFlagDefinitions().
   * Defines if the plugin hasFlagDefinitions.
   */
  public function hasFlagDefinitions() {
    return TRUE;
  }

  /**
   * flagDefinitions().
   * Defines the flag definition.
   */
  public function flagDefinitions() {
    return array();
  }

  /**
   * hasDefaultFlags().
   * Defines if the plugin has default flags.
   */
  public function hasDefaultFlags() {
    return TRUE;
  }

  /**
   * flagDefaults().
   * Defines the default flags.
   */
  public function flagDefaults() {
    return array();
  }

  /**
   * removeFlagContent().
   */
  public function removeFlagContent($activityId) {
    db_delete('flag_content')
      ->condition('content_type', 'heartbeat_activity')
      ->condition('content_id', $activityId)
      ->execute();
  }

  /**
   * activityRemoved()
   */
  public function activityRemoved($uaids, $all) {

    $query = db_delete('flag_content');
    $query->condition('content_type', 'heartbeat_activity');

    if (!empty($uaids) && $all == FALSE) {
      $query->condition('content_id', $uaids, 'IN');
    }

    $query->execute();
  }

}

/**
 * Class wrapper for the plugins.
 */
class HeartbeatPluginWrapper extends HeartbeatCtoolsObject implements iHeartbeatPluginWrapper {

  public $plugin_name = '';
  public $label = '';
  public $settings = array();
  public $plugin = NULL;
  public $error = array();

  /**
   * Get the real plugin object.
   */
  public function getPlugin() {
    if (!isset($this->plugin)) {
      $class = 'Heartbeat' . $this->plugin_name . 'Plugin';
      module_load_include('inc', $this->module, 'plugins/' . $this->plugin_name);
      if (class_exists($class)) {
        $this->plugin = new $class($this->label, $this->settings);
        $this->plugin->addSettings(array('plugin_name' => $this->plugin_name));
      }
      else {
        $this->error = array('critical' => t('No class found for @class', array('@class' => $class)));
      }
    }
    return $this->plugin;
  }

  /**
   * Call fallback function.
   */
  public function __call($method, $args) {

    if (method_exists($method, $this->plugin)) {
      return $this->plugin->$method($args);
    }

    return NULL;
  }

}